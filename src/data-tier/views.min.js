import{extractViewParams as e,getRandomKey as t}from"./utils.min.js";export class Views{constructor(e){this.dti=e,this.views={},this.scopes={},this.unscoped=[]}obtainTieViews(e){return this.views[e]||(this.views[e]={_pathsCache:[]})}deleteTieViews(e){delete this.views[e]}addView(t){const s=e(t);if(!s)return null;let i,o,n,r,h=s.length;for(;h--;)if((i=s[h]).isFunctional)for(r=(o=i.fParams).length;r--;)n=o[r],this._seekAndInsertView(n,t);else this._seekAndInsertView(i,t);return t[this.dti.paramsKey]=s,s}delView(e,t){let s,i,o,n,r=t.length;for(;r--;)if((s=t[r]).isFunctional)for(n=(i=s.fParams).length;n--;)o=i[n],this._seekAndRemoveView(o,e);else this._seekAndRemoveView(s,e);delete e[this.dti.paramsKey]}addScope(e){let s=e.getAttribute("data-tie-scope");if(s){if(s in this.scopes&&this.scopes[s]!==e)throw new Error(`scope key '${s} already claimed by another element`);if(this.scopes[s]!==e){this.scopes[s]=e;for(const t of this.unscoped)e.contains(t)&&(this.addView(t),this.unscoped.splice(this.unscoped.indexOf(t),1))}}else e.setAttribute("data-tie-scope",t(16))}delScope(){throw new Error("not implemented")}_seekAndInsertView(e,t){let s=e.tieKey;if("scope"===s){if(!(s=this._lookupClosestScopeKey(t)))return void this.unscoped.push(t);e.tieKey=s}const i=e.rawPath,o=this.obtainTieViews(s);let n=o[i];n||(n=[],o[i]=n,o._pathsCache.push(i)),n.indexOf(t)<0&&n.push(t)}_seekAndRemoveView(e,t){const s=e.tieKey,i=e.rawPath,o=this.views[s];if(o){const e=o[i];if(e){const s=e.indexOf(t);s>=0&&e.splice(s,1)}}}_lookupClosestScopeKey(e){let t,s=e;do{(t=s.getAttribute("data-tie-scope"))||(s=s.parentNode).host&&(s=s.host)}while(!t&&s&&s.nodeType!==Node.DOCUMENT_NODE);return t}setViewProperty(e,t,s){const i=t.targetProperty;try{this._unsafeSetProperty(e,t,s,i)}catch(t){console.error(`failed to set '${i}' of '${e}' to '${s}'`,t)}}_unsafeSetProperty(e,t,s,i){if("textContent"===i)this._setTextContentProperty(e,s);else if("value"===i)this._setValueProperty(e,s);else if("href"===i&&"object"==typeof e.href)e.href.baseVal=s;else if("scope"===i)this.dti.ties.update(e,s);else if("classList"===i){const i=t.iClasses.slice(0);s&&(Array.isArray(s)&&s.length?s.forEach(e=>{i.indexOf(e)<0&&i.push(e)}):"object"==typeof s?Object.keys(s).forEach(e=>{const t=i.indexOf(e);s[e]?t<0&&i.push(e):t>=0&&i.splice(t,1)}):"string"==typeof s&&i.indexOf(s)<0&&i.push(s)),e.className=i.join(" ")}else e[i]=s}_setTextContentProperty(e,t){e.textContent=void 0===t||null===t?"":t}_setValueProperty(e,t){let s=t;if(void 0===t||null===t){const t=e.nodeName;"INPUT"!==t&&"SELECT"!==t&&"TEXTAREA"!==t||(s="")}e.value=s}};